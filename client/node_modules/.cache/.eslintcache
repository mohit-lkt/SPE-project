[{"/home/mohit/SPE-project/client/src/index.js":"1","/home/mohit/SPE-project/client/src/App.js":"2","/home/mohit/SPE-project/client/src/reportWebVitals.js":"3","/home/mohit/SPE-project/client/src/component/Navbar.js":"4","/home/mohit/SPE-project/client/src/component/login.js":"5","/home/mohit/SPE-project/client/src/component/Signup.js":"6","/home/mohit/SPE-project/client/src/component/Home.js":"7","/home/mohit/SPE-project/client/src/component/Contact.js":"8","/home/mohit/SPE-project/client/src/redux/home.js":"9","/home/mohit/SPE-project/client/src/store.js":"10","/home/mohit/SPE-project/client/src/redux/index.js":"11"},{"size":500,"mtime":1620873916700,"results":"12","hashOfConfig":"13"},{"size":761,"mtime":1620880378901,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1620873916700,"results":"15","hashOfConfig":"13"},{"size":1498,"mtime":1620912159318,"results":"16","hashOfConfig":"13"},{"size":4296,"mtime":1621219530295,"results":"17","hashOfConfig":"13"},{"size":4014,"mtime":1621220847670,"results":"18","hashOfConfig":"13"},{"size":749,"mtime":1620904581097,"results":"19","hashOfConfig":"13"},{"size":9820,"mtime":1621228840894,"results":"20","hashOfConfig":"13"},{"size":348,"mtime":1620879391319,"results":"21","hashOfConfig":"13"},{"size":295,"mtime":1620894788431,"results":"22","hashOfConfig":"13"},{"size":156,"mtime":1620828804394,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"al6ks5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/mohit/SPE-project/client/src/index.js",[],["50","51"],"/home/mohit/SPE-project/client/src/App.js",[],"/home/mohit/SPE-project/client/src/reportWebVitals.js",[],"/home/mohit/SPE-project/client/src/component/Navbar.js",["52"],"import React, { useEffect, useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {NavLink} from \"react-router-dom\";\nimport { useSelector } from 'react-redux'\n\nconst Navbar = () => {\n  // console.log(atob());\n  const { token: userToken } = useSelector(state => state.home)\n  const [ isLoggedIn, setIsLoggedIn] = useState(false)\n\n  // console.log(token);\n\n  useEffect(() => {\n    // console.log('toekn',token);\n    const { token } = JSON.parse(sessionStorage.getItem('token')) || []\n    if(token ) setIsLoggedIn(true)\n  }, [ userToken ])\n  return(\n    <>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <a className=\"navbar-brand\" href=\"/\">Home</a>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul className=\"navbar-nav ml-auto\">\n      \n      <li className=\"nav-item\">\n        <NavLink className=\"nav-link\" to=\"/login\">Login</NavLink>\n      </li>\n      <li className=\"nav-item\">\n        <NavLink className=\"nav-link\" to=\"/Signup\">Signup</NavLink>\n      </li>\n\n      {/* <li className=\"nav-item\">\n        <NavLink className=\"nav-link\" to=\"/Contact\">Contact</NavLink>\n      </li> */}\n      \n\n    </ul>\n   \n  </div>\n</nav>\n    </>\n  )\n}\n\nexport default Navbar","/home/mohit/SPE-project/client/src/component/login.js",[],"/home/mohit/SPE-project/client/src/component/Signup.js",[],"/home/mohit/SPE-project/client/src/component/Home.js",["53","54"],"import React, { useState } from \"react\";\nimport { useDispatch } from 'react-redux' \nimport { withRouter } from \"react-router\";\n\nimport \"../css/home.css\";\n//import UserInfo from \"./user-Info\"\n\n\nfunction Home(props) {\n\n    \n    \n    // const [ userData, setShowUserInfo ] = useState(null)\n    // const dispatch = useDispatch()\n\n    \n\n\n    return (\n\n        <>\n            <header>\n                <React.Fragment>\n                <div className=\"welcome-text\">\n                    <h1>\n                        Let's <span>Fuel Up</span> !</h1>\n                    <a href=\"/Contact\">Create Event</a>\n                </div>\n\n                \n                </React.Fragment>\n            </header>\n        </>\n    )\n}\nexport default withRouter(Home)\n\n\n","/home/mohit/SPE-project/client/src/component/Contact.js",["55","56","57"],"import React, { useState } from 'react'\nimport {useHistory} from 'react-router-dom'\nimport \"../css/contact.css\"\nrequire('dotenv').config()\nconst baseurl = process.env.REACT_APP_BASE_URL;\nfunction Contact() {\n    var gapi = window.gapi\n    var CLIENT_ID = \"171097520847-fmhhis48uhg6p52c2q7tp25mob9a8m0t.apps.googleusercontent.com\"\n    var API_KEY = \"AIzaSyBAArOYATeu6YrCNDNok8_NyFnHxq2O-GM\"\n    var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"]\n    var SCOPES = \"https://www.googleapis.com/auth/calendar\" \n    \n    const [summary,setSummary] = useState(\"\");\n    const [location,setLocation] = useState(\"\");\n    const [description,setDescription] = useState(\"\");\n    const [startDate,setStartDate] = useState(\"\");\n    const [startTime,setStartTime] = useState(\"\");\n    const [endDate,setEndDate] = useState(\"\");\n    const [endTime,setEndTime] = useState(\"\");\n\n    const [summaryR,setSummaryR] = useState(\"\");\n    const [locationR,setLocationR] = useState(\"\");\n    const [descriptionR,setDescriptionR] = useState(\"\");\n    const [startDateR,setStartDateR] = useState(\"\");\n    const [startTimeR,setStartTimeR] = useState(\"\");\n    \n    const [error,setError] = useState(\"\");\n    const history = useHistory()\n    \n\n    const onEventCreate = (e)=>{\n        e.preventDefault()\n        const data = {summary,location,description,startDate,startTime,endDate,endTime}\n        const requestOptions = {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n             },\n            body: JSON.stringify(data)\n          };\n          fetch( baseurl + '/event', requestOptions)\n          .then(response => {\n            console.log(response.body);\n            if(response.status !== 200 ) {\n                return response.json().then((body) => {\n                    // throw new Error(body.error)\n                    console.log('red',body);\n                    setError(body.msg)\n\n                    \n                  })\n            }else{\n              window.alert(\"Created Event\");\n          }\n\n            history.push(\"/\")\n\n            return response.json()\n\n          })\n          .then(data => {\n            console.log(data)});\n\n        \n    }\n    const handleClick = () => {\n        gapi.load('client:auth2', () => {\n          console.log('loaded client')\n    \n          gapi.client.init({\n            apiKey: API_KEY,\n            clientId: CLIENT_ID,\n            discoveryDocs: DISCOVERY_DOCS,\n            scope: SCOPES,\n          })\n    \n          gapi.client.load('calendar', 'v3', () => console.log('bam!'))\n    \n          gapi.auth2.getAuthInstance().signIn()\n          .then(() => {\n            \n            var event = {\n              'summary': 'Yoga',\n              'location': 'Bangalore',\n              'description': 'Get Healthy',\n              'start': {\n                'dateTime': '2021-05-17T09:00:00-07:00',\n                'timeZone': 'America/Los_Angeles'\n              },\n              'end': {\n                'dateTime': '2021-05-18T17:00:00-07:00',\n                'timeZone': 'America/Los_Angeles'\n              },\n              'recurrence': [\n                'RRULE:FREQ=DAILY;COUNT=1'\n              ],\n              'attendees': [\n                {'email': 'ashish@example.com'},\n                {'email': 'mohit@example.com'}\n              ],\n              'reminders': {\n                'useDefault': false,\n                'overrides': [\n                  {'method': 'email', 'minutes': 24 * 60},\n                  {'method': 'popup', 'minutes': 10}\n                ]\n              }\n            }\n            if(summaryR!==\"\"){event.summary = summaryR;}\n            if(locationR!==\"\"){event.location = locationR;}\n            if(descriptionR!==\"\"){event.description=descriptionR;}\n\n            // event.location = locationR;\n            // event.description = descriptionR;\n            //event.start.dateTime = \"2021-05-18T09:00:00+05:30\";\n            //event.end.dateTime = \"2021-05-19T17:00:00-07:00\";\n            //event.start.dateTime = startDateR+\"T\"+startTimeR+\"-07:00\";\n            // console.log(summaryR);\n            // console.log(locationR);\n            // console.log(descriptionR);\n            // console.log(startDateR);\n            // console.log(startTimeR);\n            // console.log(endDateR);\n            // console.log(endTimeR);\n            // if(summaryR && locationR && descriptionR && startDateR && startTimeR && endDateR && endTimeR){\n            // event.summary = summaryR;\n            // event.location = locationR;\n            // event.description = descriptionR;\n            \n            //event.start.dateTime = startDateR+\"T\"+startTimeR+\"-07:00\";\n            // console.log(event.start.dateTime);\n             //event.end.dateTime = '2021-05-18T17:00:00-07:00';\n            // }\n            \n            var request = gapi.client.calendar.events.insert({\n              'calendarId': 'primary',\n              'resource': event,\n            })\n    \n            request.execute(event => {\n              console.log(event)\n              window.open(event.htmlLink)\n\n            })\n            \n        \n    \n          })\n        })\n      }\n\n    return(\n        <>\n             <section className=\"contact\">\n       <div className=\"content\">\n        <h2>Events</h2>\n        \n       </div>\n       \n       <div className=\"container\">\n           \n           <div className =\"contactForm\">\n               <form>\n                   <h2>Create Event</h2>\n                   <div className=\"inputBox\">\n                        <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setSummary(e.target.value)}}/>\n                        <span>Summary</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setLocation(e.target.value)}}/>\n                     <span>Location</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setDescription(e.target.value)}}/>\n                     <span>Description</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setStartDate(e.target.value)}}/>\n                     <span>Start Date(yyyy-mm-dd)</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setStartTime(e.target.value)}}/>\n                     <span>Start Time(hh:mm:ss)</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setEndDate(e.target.value)}}/>\n                     <span>End Date(yyyy-mm-dd)</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setEndTime(e.target.value)}}/>\n                     <span>End Time(hh:mm:ss)</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"submit\" name=\"\" value=\"Create\" onClick = {onEventCreate}/>\n                    \n                   </div>\n                   \n               </form>\n           </div>  \n        </div>\n        <div className=\"container\">\n           \n           <div className =\"contactForm\">\n               <form>\n                   <h2>Register in Events</h2>\n                   <div className=\"inputBox\">\n                        <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setSummaryR(e.target.value)}}/>\n                        <span>Summary</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setLocationR(e.target.value)}}/>\n                     <span>Location</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setDescriptionR(e.target.value)}}/>\n                     <span>Description</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setStartDateR(e.target.value)}}/>\n                     <span>Date(yyyy-mm-dd)</span>\n                   </div>\n                   <div className=\"inputBox\">\n                    <input type=\"text\" name=\"\" required=\"required\" onChange={(e)=> {\n                    setError('')\n                    setStartTimeR(e.target.value)}}/>\n                     <span>Time(hh:mm:ss)</span>\n                   </div>\n                   \n                   <div className=\"inputBox\">\n                    <input type=\"submit\" name=\"\" value=\"Register\" onClick = {handleClick}/>\n                   </div>\n                   \n               </form>\n           </div>  \n        </div>\n\n   </section>\n\n\n        </>\n    )\n\n}\n\nexport default Contact ;","/home/mohit/SPE-project/client/src/redux/home.js",[],"/home/mohit/SPE-project/client/src/store.js",[],"/home/mohit/SPE-project/client/src/redux/index.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":9,"column":11,"nodeType":"64","messageId":"65","endLine":9,"endColumn":21},{"ruleId":"62","severity":1,"message":"66","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":25},{"ruleId":"62","severity":1,"message":"67","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":21},{"ruleId":"62","severity":1,"message":"68","line":24,"column":12,"nodeType":"64","messageId":"65","endLine":24,"endColumn":22},{"ruleId":"62","severity":1,"message":"69","line":25,"column":12,"nodeType":"64","messageId":"65","endLine":25,"endColumn":22},{"ruleId":"62","severity":1,"message":"70","line":27,"column":12,"nodeType":"64","messageId":"65","endLine":27,"endColumn":17},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'isLoggedIn' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useDispatch' is defined but never used.","'startDateR' is assigned a value but never used.","'startTimeR' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]